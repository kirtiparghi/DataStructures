{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fmodern\fcharset0 CourierNewPS-BoldMT;}
{\colortbl;\red255\green255\blue255;\red15\green114\blue1;\red255\green255\blue255;\red0\green0\blue0;
\red10\green82\blue135;\red0\green0\blue0;\red18\green139\blue2;\red255\green255\blue255;\red0\green0\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c0\c50980\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0\c84314;
\cssrgb\c0\c40000\c60000;\cssrgb\c0\c0\c0;\cssrgb\c0\c60000\c0;\csgray\c100000;\cssrgb\c0\c0\c100000;
}
\margl1440\margr1440\vieww13700\viewh9900\viewkind0
\deftab720
\pard\pardeftab720\parhyphenfactor20\partightenfactor0

\f0\fs29\fsmilli14913 \cf2 \cb3 \expnd0\expndtw0\kerning0
// Java program to print BFS traversal from a given source vertex. 
\fs30\fsmilli15064 \cf0 \

\fs29\fsmilli14913 \cf2 // BFS(int s) traverses vertices reachable from s. 
\fs30\fsmilli15064 \cf0 \
\pard\pardeftab720\parhyphenfactor20\partightenfactor0

\f1\b\fs29\fsmilli14913 \cf5 import
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 java.io.*; 
\fs30\fsmilli15064 \

\f1\b\fs29\fsmilli14913 \cf5 import
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 java.util.*; 
\fs30\fsmilli15064 \
\pard\pardeftab720\parhyphenfactor20\partightenfactor0

\fs29\fsmilli14913 \cf0 \'a0
\fs30\fsmilli15064 \'a0\
\pard\pardeftab720\parhyphenfactor20\partightenfactor0

\fs29\fsmilli14913 \cf2 // This class represents a directed graph using adjacency list 
\fs30\fsmilli15064 \cf0 \

\fs29\fsmilli14913 \cf2 // representation 
\fs30\fsmilli15064 \cf0 \
\pard\pardeftab720\parhyphenfactor20\partightenfactor0

\f1\b\fs29\fsmilli14913 \cf5 class
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 Graph 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \{ 
\fs30\fsmilli15064 \
\pard\pardeftab720\parhyphenfactor20\partightenfactor0

\fs29\fsmilli14913 \cf0 \'a0\'a0\'a0\'a0
\f1\b \cf5 private
\f0\b0\fs30\fsmilli15064 \cf0  
\f1\b\fs29\fsmilli14913 \cf5 int
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 V;\'a0\'a0 \cf2 // No. of vertices 
\fs30\fsmilli15064 \cf0 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0
\f1\b \cf5 private
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 LinkedList<Integer> adj[]; \cf2 //Adjacency Lists 
\fs30\fsmilli15064 \cf0 \

\fs29\fsmilli14913 \'a0
\fs30\fsmilli15064 \'a0\

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\cf2 // Constructor 
\fs30\fsmilli15064 \cf0 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0Graph(
\f1\b \cf5 int
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 v) 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\{ 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0V = v; 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0adj = 
\f1\b \cf5 new
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 LinkedList[v]; 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf5 for
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 (
\f1\b \cf5 int
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 i=\cf7 0\cf0 ; i<v; ++i) 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0adj[i] = 
\f1\b \cf5 new
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 LinkedList(); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\} 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0
\fs30\fsmilli15064 \'a0\

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\cf2 // Function to add an edge into the graph 
\fs30\fsmilli15064 \cf0 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0
\f1\b \cf5 void
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 addEdge(
\f1\b \cf5 int
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 v,
\f1\b \cf5 int
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 w) 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\{ 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0adj[v].add(w); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\} 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0
\fs30\fsmilli15064 \'a0\
\pard\pardeftab720\parhyphenfactor20\partightenfactor0

\fs29\fsmilli14913 \cf0 \cb8 \'a0\'a0\'a0\'a0\cf2 // prints BFS traversal from a given source s 
\fs30\fsmilli15064 \cf0 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0
\f1\b \cf5 void
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 BFS(
\f1\b \cf5 int
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 s) 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\{ 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf2 // Mark all the vertices as not visited(By default 
\fs30\fsmilli15064 \cf0 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf2 // set as false) 
\fs30\fsmilli15064 \cf0 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf5 boolean
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 visited[] = 
\f1\b \cf5 new
\f0\b0\fs30\fsmilli15064 \cf0  
\f1\b\fs29\fsmilli14913 \cf5 boolean
\f0\b0 \cf0 [V]; 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0
\fs30\fsmilli15064 \'a0\

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf2 // Create a queue for BFS 
\fs30\fsmilli15064 \cf0 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0LinkedList<Integer> queue = 
\f1\b \cf5 new
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 LinkedList<Integer>(); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0
\fs30\fsmilli15064 \'a0\

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf2 // Mark the current node as visited and enqueue it 
\fs30\fsmilli15064 \cf0 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0visited[s]=
\f1\b \cf5 true
\f0\b0 \cf0 ; 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0queue.add(s); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0
\fs30\fsmilli15064 \'a0\

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf5 while
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 (queue.size() != \cf7 0\cf0 ) 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\{ 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf2 // Dequeue a vertex from queue and print it 
\fs30\fsmilli15064 \cf0 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0s = queue.poll(); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0System.out.print(s+\cf9 " "\cf0 ); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0
\fs30\fsmilli15064 \'a0\

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf2 // Get all adjacent vertices of the dequeued vertex s 
\fs30\fsmilli15064 \cf0 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf2 // If a adjacent has not been visited, then mark it 
\fs30\fsmilli15064 \cf0 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf2 // visited and enqueue it 
\fs30\fsmilli15064 \cf0 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Iterator<Integer> i = adj[s].listIterator(); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf5 while
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 (i.hasNext()) 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\{ 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf5 int
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 n = i.next(); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b \cf5 if
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 (!visited[n]) 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\{ 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0visited[n] = 
\f1\b \cf5 true
\f0\b0 \cf0 ; 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0queue.add(n); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\} 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\} 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\} 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\} 
\fs30\fsmilli15064 \
\pard\pardeftab720\parhyphenfactor20\partightenfactor0

\fs29\fsmilli14913 \cf0 \cb3 \'a0
\fs30\fsmilli15064 \'a0\

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\cf2 // Driver method to 
\fs30\fsmilli15064 \cf0 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0
\f1\b \cf5 public
\f0\b0\fs30\fsmilli15064 \cf0  
\f1\b\fs29\fsmilli14913 \cf5 static
\f0\b0\fs30\fsmilli15064 \cf0  
\f1\b\fs29\fsmilli14913 \cf5 void
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 main(String args[]) 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\{ 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Graph g = 
\f1\b \cf5 new
\f0\b0\fs30\fsmilli15064 \cf0  
\fs29\fsmilli14913 Graph(\cf7 4\cf0 ); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0
\fs30\fsmilli15064 \'a0\

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0g.addEdge(\cf7 0\cf0 , \cf7 1\cf0 ); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0g.addEdge(\cf7 0\cf0 , \cf7 2\cf0 ); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0g.addEdge(\cf7 1\cf0 , \cf7 2\cf0 ); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0g.addEdge(\cf7 2\cf0 , \cf7 0\cf0 ); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0g.addEdge(\cf7 2\cf0 , \cf7 3\cf0 ); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0g.addEdge(\cf7 3\cf0 , \cf7 3\cf0 ); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0
\fs30\fsmilli15064 \'a0\

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0System.out.println(\cf9 "Following is Breadth First Traversal "\cf0 + 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf9 "(starting from vertex 2)"\cf0 ); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0
\fs30\fsmilli15064 \'a0\

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0g.BFS(\cf7 2\cf0 ); 
\fs30\fsmilli15064 \

\fs29\fsmilli14913 \'a0\'a0\'a0\'a0\} 
\fs30\fsmilli15064 \
\pard\pardeftab720\parhyphenfactor20\partightenfactor0

\fs29\fsmilli14913 \cf0 \} }